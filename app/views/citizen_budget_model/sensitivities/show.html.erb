<% content_for :breadcrumb do %>
<ol class="breadcrumb">
  <li><%= link_to _('Sensitivity Tables'), sensitivities_path %></li>
  <li class="active"><%= @sensitivity.name %>
    <%= link_to [:edit, @sensitivity], class: 'btn btn-default btn-xs', title: _('Edit') do %>
      <span class="glyphicon glyphicon-pencil"></span>
    <% end %>
  </li>
</ol>
<% end %>

<h2><%= _('Publicly Editable Variables') %></h2>
<% if @sensitivity.variables.any? %>

<ul class="list-unstyled index sortable" data-sort-url="<%= sort_variable_sensitivity_path%>">
<% @sensitivity.variables.where(public_editable: true).each do |variable| %>
  <li id="<%= dom_id(variable) %>">
    <span class="glyphicon glyphicon-resize-vertical"></span>
    <%= link_to variable.name, [@sensitivity, variable] %>
    <span class="actions">
      <%= link_to [:edit, @sensitivity, variable] do %>
        <span class="glyphicon glyphicon-pencil"></span> <%= _('Edit') %>
      <% end %>
    </span>
  </li>
<% end %>
</ul>

<h2><%= _('Not Public Editable Variables') %></h2>
<ul class="list-unstyled index sortable" data-sort-url="<%= sort_variable_sensitivity_path%>">
<% @sensitivity.variables.where(public_editable: false).each do |variable| %>
  <li id="<%= dom_id(variable) %>">
    <span class="glyphicon glyphicon-resize-vertical"></span>
    <%= link_to variable.name, [@sensitivity, variable] %>
    <span class="actions">
      <%= link_to [:edit, @sensitivity, variable] do %>
        <span class="glyphicon glyphicon-pencil"></span> <%= _('Edit') %>
      <% end %>
    </span>
  </li>
<% end %>
</ul>

<% end %>

<p>
  <%= link_to(new_sensitivity_variable_path(@sensitivity), class: 'btn btn-primary') do %>
    <span class="glyphicon glyphicon-plus"></span> <%= _('Add a variable') %>
  <% end %>
</p>


<h2><%= _('Sections') %></h2>
<% if @sensitivity.sensitivity_sections.any? %>

  <ul class="list-unstyled index sortable">
<% @sensitivity.sensitivity_sections.each do |section| %>
  <li id="<%= dom_id(section) %>">
    <span class="glyphicon glyphicon-resize-vertical"></span>
    <%= link_to section.name, [@sensitivity, section] %>
    <span class="actions">
      <%= link_to [:edit, @sensitivity, section] do %>
        <span class="glyphicon glyphicon-pencil"></span> <%= _('Edit') %>
      <% end %>
    </span>
  </li>
<% end %>
</ul>
<% end %>
<p>
  <%= link_to(new_sensitivity_sensitivity_section_path(@sensitivity), class: 'btn btn-primary') do %>
    <span class="glyphicon glyphicon-plus"></span> <%= _('Add a section') %>
  <% end %>
  </p>
  <% @sections = Array.new %>
  <% @sensitivity.sensitivity_sections.each do |s| %>
    <% @sections << {name: s.name, is_title: true} %>
    <% s.impacts.each do |impact| %>
      <% @sections << {name: impact.name, is_title: false} %>
    <% end %>
  <% end %>
  <% @sections << {name:'', is_title: false} %>


  <% @data = Array.new %>
  <% @sensitivities = Array.new %>
  <% @variables = Array.new %>
  <% @data << {variable_name:"Default Formula", pbo_assumption:@sensitivity.default_excel_formula, url:sensitivity_path(@sensitivity),B:"default_formula", bold:[0]} %>
  <% @data << {} %>
  <% @sensitivity.sensitivity_sections.each do |s| %>

    <% @sensitivities << {sname: s.name,
                          E: '',
                          F: '',
                          G: '',
                          H: '',
                          year_1_excel_formula: 'Year 1',
                          year_1_formula: '',
                          year_2_excel_formula: 'Year 2',
                          year_2_formula: '',
                          year_5_excel_formula: 'Year 5',
                          year_5_formula: '',
                          impact_url: '',
                          bold:[5,6,7,8]
                        } %>
    <% s.impacts.each do |impact| %>
      <% @sensitivities << {sid: impact.id,
                            sname: impact.name,
                            E: impact.machine_name,
                            F: "#{impact.machine_name}_year_1",
                            G: "#{impact.machine_name}_year_2",
                            H: "#{impact.machine_name}_year_5",
                            year_1_excel_formula: impact.year_1_excel_formula,
                            year_1_formula: impact.year_1_formula,
                            year_2_excel_formula: impact.year_2_excel_formula,
                            year_2_formula: impact.year_2_formula,
                            year_5_excel_formula: impact.year_5_excel_formula,
                            year_5_formula: impact.year_5_formula,
                            impact_url: sensitivity_sensitivity_section_impact_path(@sensitivity, s, impact),
                            bold:[5,6,7,8]
                          } %>
    <% end %>
  <% end %>

  <% @variables << {variable_name: "Public Editable Variables", pbo_assumption:"PBO Assumption", user_input: "User Input"} %>
  <% @sensitivity.variables.where(public_editable: true).each do |v|
    @variables << {id: v.id,
                   variable_name:v.name,
                   B:"#{v.machine_name}_pbo_assumption",
                   pbo_assumption:v.pbo_assumption,
                   user_input:v.default_value,
                   C:"#{v.machine_name}_user_input",
                   variable_url: sensitivity_variable_path(@sensitivity, v)
                  }
    end
  %>

  <% @variables << {variable_name: "Non Public Editable Variables", pbo_assumption:"PBO Assumption", user_input: ""} %>
  <% @sensitivity.variables.where(public_editable: false).each do |v|
      @variables << {id: v.id, variable_name:v.name, B:v.machine_name, pbo_assumption:v.pbo_assumption, user_input:'', variable_url: sensitivity_variable_path(@sensitivity, v)}
    end
  %>
  <% if @sensitivities.size > @variables.size %>
    <% @sensitivities.each_with_index do |s, index| %>
      <% if @variables[index].blank? %>
        <% @data << s %>
      <% else %>
        <% @data << @variables[index].merge(s) %>
      <% end %>
    <% end %>

  <% else %>
    <% @variables.each_with_index do |v, index| %>
      <% @data << @sensitivities[index].merge(v) %>
    <% end %>

  <% end %>
  <div id="hot"></div>
  <div class="formula2"></div>
  <div class="status"></div>

  <script>
/*
  var public_variables = <%= @sensitivity.variables.where(public_editable: true).collect {|v| [v.name, v.pbo_assumption, v.default_value]}.to_json.html_safe ;%>
  var variables = <%= @sensitivity.variables.where(public_editable: false).collect {|v| [v.name, v.pbo_assumption, v.default_value]}.to_json.html_safe ;%>
  var sections = <%= @sections.to_json.html_safe ;%>
  var sensitivity_data = [
    ['PBO Economic Assumptions','','','','','Sensitivity Table','','','',''],
    [],
    ['Variables',	'PBO Assumption  ',	'User Input  ',	'',	'', 'Year 1  ',	'Year 2  ','Year 5  ']
    ];
*/
  var table = document.getElementById('hot');
  var data = <%= @data.to_json.html_safe %>;


  var hot2 = new Handsontable(table, {
    data: data,
    formulas: true,
    rowHeaders: true,
    colHeaders: true,
    columns: [
      {data: 'variable_name'},
      {data: 'pbo_assumption', type:'numeric', format:'0.00'},
      {data: 'user_input', type:'numeric', format:'0.00'},
      {data: ''},
      {data: 'sname'},
      {data: 'year_1_excel_formula', type:'numeric', format:'0.00'},
      {data: 'year_2_excel_formula', type:'numeric', format:'0.00'},
      {data: 'year_5_excel_formula', type:'numeric', format:'0.00'}
    ],
    afterChange: function (change, source) {
      if(change != undefined) {
        var re = /([A-Za-z]+\d+)+/g;
        var str = change[0][3];
        var data_row = change[0][0];
        var data_attr = change[0][1];
        var m, m2;
        var formula = str;

        if (data_attr == 'year_1_excel_formula' || data_attr == 'year_2_excel_formula' || data_attr == 'year_5_excel_formula') {
          while ((m = re.exec(str)) !== null) {
            if (m.index === re.lastIndex) {
                re.lastIndex++;
            }
            m2 = /([A-Za-z]+)(\d+)+/g.exec(m[0]);
            if (m2) {
              var row = parseInt(m2[2])-1;
              var col = m2[1];

              var impact_url = data[data_row]['impact_url'];
              formula = formula.replace(m[0], data[row][col]);
            }
          }
          var year_formula = data_attr.replace("_excel", "");
          var impact = {};
          impact[year_formula] = formula.replace("=", "");
          impact[data_attr] = str;
          $.ajax({
            url: impact_url,
            dataType: 'json',
            method: 'PUT',
            data: {
              impact: impact
            }
          }).fail(function() {
            $(".status").show().html("Error!");
          }).done(function() {
            $(".status").show().html("Saved");
          }).complete(function(){
            setTimeout(function(){
              $(".status").fadeOut(1000);
            }, 2000);
          });

          $(".formula2").html(formula);
        } else if(data_attr == 'pbo_assumption') {
          if (data_row > 0) {

            var variable_url = data[data_row]['variable_url'];
            $.ajax({
              url: variable_url,
              dataType: 'json',
              method: 'PUT',
              data: {
                variable: {
                  pbo_assumption: change[0][3]
                }
              }
            }).fail(function() {
              $(".status").show().html("Error!");
            }).done(function() {
              $(".status").show().html("Saved");
            }).complete(function(){
              setTimeout(function(){
                $(".status").fadeOut(1000);
              }, 2000);
            });

          } else {
            while ((m = re.exec(str)) !== null) {
              if (m.index === re.lastIndex) {
                  re.lastIndex++;
              }
              m2 = /([A-Za-z]+)(\d+)+/g.exec(m[0]);
              if (m2) {
                var row = parseInt(m2[2])-1;
                var col = m2[1];

                var url = data[data_row]['url'];
                formula = formula.replace(m[0], data[row][col]);
              }
            }

            var sensitivity = {};
            sensitivity['default_formula'] = formula.replace("=", "");
            sensitivity['default_excel_formula'] = str;
            $.ajax({
              url: url,
              dataType: 'json',
              method: 'PUT',
              data: {
                sensitivity: sensitivity
              }
            }).fail(function() {
              $(".status").show().html("Error!");
            }).done(function() {
              $(".status").show().html("Saved");
            }).complete(function(){
              setTimeout(function(){
                $(".status").fadeOut(1000);
              }, 2000);
            });

            $(".formula2").html(formula);
          }
        }
      }
    }
  });

/*
  var hot = new Handsontable(table, {
    data: sensitivity_data,
    formulas: true,
    rowHeaders: true,
    colHeaders: true,
    //readOnly: true,
    mergeCells: [
      {row:0, col:0, colspan:5, rowspan: 1},
      {row:0, col:5, colspan:5, rowspan: 1},
      ],
      columns: [
        {data: 'id'},
        {data: 'name'},
        {data: 'name.last'},
        {data: 'address'}
      ]
    });
  var row;
  $.each(public_variables, function(i,v){
    if (v[0] != undefined) {
      hot.setDataAtCell(i+4, 0, v[0]);
    }
    if (v[1] != undefined) {
      hot.setDataAtCell(i+4, 1, v[1]);
      hot.setCellMeta(i+4, 1, 'readOnly', false);
    }
    if (v[2] != undefined) {
      hot.setDataAtCell(i+4, 2, v[2]);
      hot.setCellMeta(i+4, 2, 'readOnly', false);
    }
    row = i;
  });

  var bolds = [];
  var italics = [];

  hot.setDataAtCell(row + 6, 0, 'Not Publicly Editable');
  hot.setDataAtCell(row + 6, 1, 'PBO Assumption');
  italics.push({row: row+6, col: 0});
  italics.push({row: row+6, col: 1});

  row = row + 3;
  $.each(variables, function(i,v){
    if (v[0] != undefined) {
      hot.setDataAtCell(row+4, 0, v[0]);
    }
    if (v[1] != undefined) {
      hot.setDataAtCell(row+4, 1, v[1]);
      hot.setCellMeta(row+4, 1, 'readOnly', false);
    }
    row = row + 1;
  });


  $.each(sections, function(i,s){
    if(s != undefined) {
      hot.setDataAtCell(i+4, 4, s.name);
      if(!s.is_title) {
        hot.setCellMeta(i+4, 5, 'readOnly', false);
        hot.setCellMeta(i+4, 6, 'readOnly', false);
        hot.setCellMeta(i+4, 7, 'readOnly', false);
      } else {
        bolds.push({row:i+4, col: 4});
      }
    }
  });

  $.each(sensitivity_data[0], function(i,d) {
    hot.getCell(0, i).style.fontWeight = 'bold';
    hot.getCell(0, i).style.color = 'black';

    hot.getCell(2, i).style.fontStyle = 'bold';
    hot.getCell(2, i).style.color = 'black';
  });

  $.each(bolds, function(i,d) {
    hot.getCell(d.row, d.col).style.fontWeight = 'bold';
    hot.getCell(d.row, d.col ).style.color = 'black';
  });

  $.each(italics, function(i,d) {
    hot.getCell(d.row, d.col).style.fontStyle = 'oblique';
    hot.getCell(d.row, d.col).style.color = 'black';
    });
*/
/*
  function boldRenderer(instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    td.style.fontWeight = 'bold';
    td.style.color = 'black';
  }

  function italicRenderer(instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    td.style.fontStyle = 'oblique';
    td.style.color = 'black';
    }

 */

</script>
